<?php

/**
 * Local Configuration Override
 *
 * This configuration override file is for overriding environment-specific and
 * security-sensitive configuration information. Copy this file without the
 * .dist extension at the end and populate values as needed.
 *
 * @NOTE: This file is ignored from Git by default with the .gitignore included
 * in ZendSkeletonApplication. This is a good practice, as it prevents sensitive
 * credentials from accidentally being committed into version control.
 */
$dbParams = array(
    'database' => "zend2_blog",
    'username' => 'root',
    'password' => 'root',
    'hostname' => 'localhost'
);

return array(
    // Whether or not to enable a configuration cache.
    // If enabled, the merged configuration will be cached and used in
    // subsequent requests.
    //'config_cache_enabled' => false,
    // The key used to create the configuration cache file name.
    //'config_cache_key' => 'module_config_cache',
    // The path in which to cache merged configuration.
    //'cache_dir' =>  './data/cache',
    // ...
    "db"              => array(
        "username" => "root",
        "password" => "root",
    ),
    'service_manager' => array(
        'factories' => array(
            'Zend\Db\Adapter\Adapter' => function ($sm) use ($dbParams) {
        $adapter = new BjyProfiler\Db\Adapter\ProfilingAdapter(array(
            'driver'   => 'pdo',
            'dsn'      => 'mysql:dbname=' . $dbParams['database'] . ';host=' . $dbParams['hostname'],
            'database' => $dbParams['database'],
            'username' => $dbParams['username'],
            'password' => $dbParams['password'],
            'hostname' => $dbParams['hostname'],
        ));

        if (php_sapi_name() == 'cli') {
            $logger = new Zend\Log\Logger();
            // write queries profiling info to stdout in CLI mode
            $writer = new Zend\Log\Writer\Stream('php://output');
            $logger->addWriter($writer, Zend\Log\Logger::DEBUG);
            $adapter->setProfiler(new BjyProfiler\Db\Profiler\LoggingProfiler($logger));
        } else {
            $adapter->setProfiler(new BjyProfiler\Db\Profiler\Profiler());
        }
        if (isset($dbParams['options']) && is_array($dbParams['options'])) {
            $options = $dbParams['options'];
        } else {
            $options = array();
        }

        $adapter->injectProfilingStatementPrototype($options);
        return $adapter;
    },
        ),
    ),
);

